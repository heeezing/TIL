<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.member.dao.MemberMapper">
	
	<!-- 회원 가입 - spmember_detail -->
	<insert id="insertMember_detail" parameterType="memberVO">
		INSERT INTO spmember_detail(
			mem_num,
			name,
			passwd,
			phone,
			email,
			zipcode,
			address1,
			address2
		)
		VALUES(
			#{mem_num},
			#{name},
			#{passwd},
			#{phone},
			#{email},
			#{zipcode},
			#{address1},
			#{address2}
		)
	</insert>
	
	<!-- ID를 이용한 회원 정보 체크 -->		
	<select id="selectCheckMember" parameterType="string" resultType="memberVO">
		SELECT 
			m.mem_num,
			m.id,
			m.auth,
			d.au_id,
			d.passwd,
			m.nick_name,
			d.email
		FROM spmember m LEFT OUTER JOIN spmember_detail d
		ON m.mem_num = d.mem_num
		WHERE m.id = #{id}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="updateMember_detail" parameterType="memberVO">
		UPDATE 
		  spmember_detail
		SET 
		  name=#{name},
		  phone=#{phone},
		  email=#{email},
		  zipcode=#{zipcode},
		  address1=#{address1},
		  address2=#{address2},
		  modify_date=SYSDATE
		WHERE
		  mem_num=#{mem_num}
	</update>
	
	
	<!-- 관리자 회원 목록 -->
	<!-- 동적 SQL문 생성. 쉽게 말하면 SQL문 조각! 
	     sql태그와 include태그를 이용해서 SQL문을 재사용할 수 있다. -->
	<sql id="memberSearch"> 
		<where>
			<if test="keyword!=null and keyword!=''">
				<if test="keyfield == 1"> 
					m.id LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfield == 2"> 
					d.name LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfield == 3"> 
					d.email LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfield == 4"> 
					m.id LIKE '%' || #{keyword} || '%' or
					d.name LIKE '%' || #{keyword} || '%' or
					d.email LIKE '%' || #{keyword} || '%'
				</if>
			</if>		
		</where>
	</sql>
	
	<!-- 전체or검색 레코드 수 -->
	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT COUNT(*)
		FROM spmember m LEFT OUTER JOIN spmember_detail d ON m.mem_num = d.mem_num
		<include refid="memberSearch"></include> <!-- 미리 만들어놓은 WHERE절을 include하여 재사용 -->
	</select>
	
	<!-- 전체or검색 목록 -->
	<select id="selectList" parameterType="map" resultType="memberVO">
		SELECT *
		FROM (SELECT a.*, rownum rnum
			  FROM (SELECT *
			  		FROM spmember m LEFT OUTER JOIN spmember_detail d ON m.mem_num=d.mem_num
			  		<include refid="memberSearch"></include>
			  		ORDER BY d.reg_date DESC NULLS LAST)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
</mapper>